{{toc}}
!title:卒論編集システムにおけるhikiとの同期
!author:関西学院大学理工学部情報科学科　西谷滋人
!イントロダクション
卒業論文は，大学で課される普通の授業のレポートに比べて深い内容が要求されます．また，研究という側面から体裁や版権など出版における多くの掟を遵守しながら，高い品質を保つ必要があります．そのため，習熟者による個別指導が不可欠であり，指導教官との編集作業が必要となります．編集作業の効率を高めるためには，共同作業を促進するプラットフォームが必要です．

体裁などを考えるとLatexの使用が標準ですが，執筆段階での煩わしさを低減するため，Mark Up記法による文章作成が一般的です{{cite(DocGuide)}}．西谷研ではMark Up記法の一種であるhiki記法を用いて執筆します．hiki記法は，日記web appliのhiki diaryでも利用されている有名なソフトです．hiki記法からhtmlへ容易な変換が可能なソフトhikidocを利用します．hiki記法をベースにして，wiki wiki webと同等の機能を提供するhikiシステムがgithubに公開されており，個人の手持ちのパソコンにインストールしてwikiを利用することができます．西谷研ではさらにhiki記法を拡張して，コードのカラー表示，数式のlatex記述が可能となるシステムを利用しています．

本資料では，卒論の編集作業を効率化する図{{ref(fig:SystemOutline)}}に示すようなシステムの使い方を解説します．
!!!caption:(fig:SystemOutline)卒論編集システムの基本概念．
{{attach_view(hikiutils_bob.002.jpeg,hikiutils_bob)}}

例えば，卒業生をyamaneとしましょう．yamaneの個人のMacの自分のdirectory(hikiutils_yamane)に幾つかのファイルを作成して卒論を書いているとします．これを指導教官(bob)が編集するとします．この同期には，Githubにより提供される共同作業環境を使います．これだけでは編集中の文書の体裁がわかりにくいでしょう．そこで，hikiシステムにより容易にwebブラウザ上に完成形を表示しつつ執筆することが求められます．このような環境を提供するのが，本システムです．

!hikiとの同期
!! hikiutilsのinstall
hikiuitlsをgemからinstallしておく必要がある．コマンドは以下の通り．

 gem install hikiutils
さらに
 hiki -v
で0.2.3.2以上であることを確認．

!! 個別ディレクトリーの構成
コマンド
 hiki -i
によって以下のようなファイルが作成される．

<<< tcsh
bob% ls -lat
total 1072
-rw-r--r--   1 bob  501      99  1 20 12:44 .hikirc
drwxr-xr-x   5 bob  501     170  1 20 12:44 figs/
drwxr-xr-x  12 bob  501     408  1 20 12:34 ./
-rw-r--r--   1 bob  501       8  1 20 11:01 .gitignore
-rw-r--r--   1 bob  501    3507  1 20 11:01 Rakefile
drwxr-xr-x   2 bob  501      68  1 20 11:01 data/
drwxr-xr-x  26 bob  501     884  1 20 11:00 ../
>>>

この.hikircにデータが設定データが自動的に入る．さらにhikiutils_bob.hikiおよびhikiutils_bob.keyを作成する．これで執筆ファイルの基本構成が出来上がる．keynoteで図を作成して，hikiutils_bob.hikiに文章を記述していく．

"hiki -i"で設定されるのはこのほかに，
* hiki_help.ymlが"~/.my_help"に入る．また，
* .gitignoreに.hikircが追記される．
二つ目の動作は，学生と指導者でhikiシステムの格納位置が違うので，それを吸収するため．なんかうまく動いてないときがある．ディレクトリーのエラーが出たときには，"hiki -i"を再度行うべし．


!!システムの概要
図に論文作成システムの概要を示している．gemのなかに作られた例えば，hikiutils_bobなどのdirectory内にRakefileなどを次節のコマンドを使って入れる．このdirectoryでhikiutils_bob.hikiなどのhikiフォーマットのdocumentを作っていく．rake syncによってwebを提供するhikiのtext, attach, parserなどと同期する．一方，最終の卒業論文形態であるpdfにするためにlatex_dir内に*.texを生成する．これは次章で解説する．
!!!caption:システムの概要．
{{attach_view(hikiutils_bob.004.jpeg,hikiutils_bob)}}

!!一般的な執筆手順
#書類の作成
##open -a mi hikiutils_bob.hiki
#keynoteを開ける
##open hikiutils_bob.key
#keynoteのイメージをfigsに
##keynoteでイメージへ書き出し(hikiutils_bobを仮定)
##rake convert 60 hikiutils_bob
#hikiシステムとの同期
## rake sync
# hikiシステムで表示
## hiki -u hikiutils_bob (個別のhiki fileを表示)
## rake touch (全てを表示)

!!rakeが用意しているタスク
rakeの用意しているコマンドは次のとおり．

<<< tcsh
rake sync             # hikiの同期
rake force_sync       # hikiの強制同期
rake chenv            # For hiki Errno::ENOENT, Errno::EACCES

rake convert          # convert fig size SCALE TARGET_DIR
rake increment        # increment fig NUBERS in FILE
rake number           # numbering figs from the NUBER in FILE

rake touch            # FILE.hikiあるいはhikiファイルすべてを最新状態に更新(new)
rake open             # FILE.hikiあるいはhikiファイルをedtiorで開く(new)
rake github           # Githubのdirをsafariでopen(new)
rake reset_hiki       # hikiシステムにあるゴミファイルを掃除する(new)
>>>

!!!rake sync
hikiutils_bobにある必要な書類をhikiシステムにコピーする．その際，名前の書き換えを行う．
|| hikiutils_bobでの名前 || hikiシステムでの名前
|| hikiutils_bob.hiki || hikiutils_bob
|| introduction.hiki || hikiutils_bob_introduction

figsディレクトリー内のファイルはhiki/cache/attache/hikiutils_bobにcpされる．従って，hiki文書中で参照するには，
 {{attach_view(hogehoge.png, hikiutils_bob)}}
という記述が必要となる．

!!!rake force_sync
hikiシステム側で直接変更を加えると，hikiutilsがsyncした時と差ができる．これを検知して，ユーザに注意を喚起する仕組みがある（rake check_previous)．これはsyncした時に自動的に呼び出される．違いの出たfilesを修正した後に強制的に同期をとるためのコマンドとして，force_syncが用意されている．

!!!rake chenv
hikiシステム上でerrorが出た場合(Errno::ENOENT, Errno::EACCES)に試してほしい．errorの状況は個人の設定によってちがうため，対処法の実装は網羅されていない．うまくいかない場合は西谷にIssuesとして投げるように．

!!!rake convert VAL DIR
keynoteが吐き出したイメージを変換するためのコマンド．ImageMagickがインストールされている必要がある．ない場合は，自分でbrewからinstallするか，[[https://www.imagemagick.org/script/binary-releases.php]]からダウンロード．うまくいかない場合はdonkeyに聞いてみてください．

 rake convert 80 hikiutils_bob
によって，DIR=hikiutils_bobにあるpngファイルをVAL=80%に縮小してfigsにためる．

!!!rake increment
keynoteでページを追加するとhikiでの参照(attach_view)にずれが生じる．いまのところこれを解消する方法はなく手で修正を加える必要がある．ずれが単純な場合には，
<<< bash
cp hikiutils_bob.hiki tmp.hiki
rake increment 2 tmp.hiki > tmp2.hiki
>>>
としてattach_viewのページ番号を単純に増加させることができる．

!!!rake number
rake incrementと同じくfigs内の通し番号が変わった時にattach_viewの通し番号を調整するコマンド．
<<< tcsh
rake number 3 hikiutils_bob.hiki > tmp.hiki
cp tmp.hiki hikiutils_bob.hiki
>>>
とすると
<<< tcsh
8c8
< {{attach_view(hikiutils_bob.002.jpeg,hikiutils_bob)}}
---
> {{attach_view(hikiutils_bob.003.jpeg,hikiutils_bob)}}
21c21
< {{attach_view(hikiutils_bob.003.jpeg,hikiutils_bob)}}
---
> {{attach_view(hikiutils_bob.004.jpeg,hikiutils_bob)}}
>>>
などと番号を3から順に振り替えてくれる．

!!!rake open [FILE] (new)
FILE.hikiあるいはhikiファイルをedtiorで開く.

!!!rake touch [FILE](new)
FILE.hikiあるいはhikiファイルすべてを最新状態に更新．

!!!rake github(new)
git remote -vにあるoriginをsafariでopenします．

!!!rake reset_hiki(new)
hikiシステムにあるゴミファイルを掃除します．

<<< tcsh
bob% rake reset_hiki
hikiutils: provide utilities for helping hiki editing.
"open -a mi"
target_dir : /Users/bob/Sites/nishitani0/Internal/data/text
-rw-rw-rw-  1 bob  staff    182  2  5 12:03 hikiutils_bob
-rw-rw-rw-  1 bob  staff   7220  2  5 12:03 hikiutils_bob_latex_all
-rw-rw-rw-  1 bob  staff  10104  2  5 12:03 hikiutils_bob_sync
-rw-r--r--  1 bob  staff    944  2  5 12:03 hikiutils_bob_toc
remove hikiutils_bob_toc[ynqlA]?
>>>
となります．yes, no, quit, list, Allのなかから選んでください．

!!githubによる同期

githubの共同機能を用いて，編集を卒業生と指導者が共同でおこなう環境を用意しています．
作業の流れを示すシーケンス図は図{{ref(fig:CoEditing)}}の通りです．
!!!caption:(fig:CoEditing)卒論編集時のgithubによる同期のシーケンス図．
{{attach_view(hikiutils_bob.005.jpeg,hikiutils_bob)}}

git init, forkが済んでいると仮定して同期の手順を以下に示す．
# git push作業
## git add -A
## git commit -m 'first commit'
## git push origin master
# githubでbobへpull requestをかける
# bobの編集後，通知がくる．まつことなく作業してもok．
# git pull作業
## git pull upstream master

以下には関連するコマンドと動作を記した．
:git remote -v: githubのremoteアドレスを表示
:git remote add upstream git@...:githubのアドレスをupstreamとして登録．

!!hikiディレクトリー対応
hikiファイルが多くなってくると，フォルダーをつくってそこへまとめたくなります．
それに，対応しているのは以下のオプションです．
<<<
rake open hiki_dir
rake touch hiki_dir
rake sync hiki_dir
rake latex_all hiki_dir
>>>

!!hikiutil関連のヘルプ
!!!hikiで卒論を書くときの初期化と掟
*目的：西谷が後で迷わないように決まったファイル構造を堅持すべし
*文書：hikiで書く.のちには，latexに変換するプログラムを提供します
*図表：すべての図表をkeynoteにまとめる，タイトルを分かりやすく書く
*データ：dataディレクトリにまとめる．ファイル名をkeynoteの対応する図表中に記す
*hiki --initializeで初期ファイル(Rakefile, ./.hikirc, hiki_help.yml)がcopyされる
*hiki_help.ymlを適宜~/.my_helpにcopyしてhiki_helpとして利用，(my_help参照)
*Errno::EACCESやpermission errorがでたときはrake chenvを試してみる（報告して）
*rake syncによってhikiディレクトリーと同期が取られる
*hiki -u TARGETによってブラウザー表示される
*テキストの拡張子は'.hiki'
*hikiでのurlはテキスト前とディレクトリーから自動生成される
*例えば，hiki2latex_saki/introduciton.hikiとするとhiki2latex_saki_introducitonと変換される

!!!図表に関する制約
*すべての図表をkeynoteにまとめる
*keynoteに書いたスライドはイメージに書き出して，rake convert 80 TARGET_DIRでfigsに変換
*rake syncでfigsにあるfilesはhiki/target_dirにcpされる
*\verb|convert #{source} -resize 20% #{target}によって，target=figs/TAERGET.pngに20%に縮小して保存される|
*convert -density 300 view.svg view.pngで300dpiで変換
*attach_anchorでは'{{attach_anchor(test.png, hiki2latex_saki)}}'と，directory指定しなければならない.
*keynoteであとで図を挿入して番号が変わった時の原稿の一括変換
*rake increment 2 boundary_bob.hiki boundary_bob > tmp.hiki
*rake convert 60 boundary_bob
*rake sync
*hiki -u boundary_bob_tmp

!!!hikiとの同期に関する制約
*hikiはフラットなdirectory構造を取っている
*hikiの文書はスネーク表記(例えば，latex2hiki_saki)で階層構造に似せている
*hikiのurlの接頭語となる名前をbasenameのdirectory名とする．
*directory名が'hikis'である場合はその親directory名となる．
* ~/.hikircのtarget directoryを同期先のdirectoryとする．
* ~/.hikircがない場合は同期先のdirectoryを聞く．
* それらは./.hikircに保存される

!!!テキストに関する制約
* テキストの拡張子は'.hiki'としている
* hikiでのurlはテキスト前とディレクトリーから自動生成される
* 例えば，hiki2latex_saki/introduciton.hikiとするとhiki2latex_saki_introducitonと変換される
