{{toc}}

!卒論の最終形態への変換手順
 [[hikiutils_bob_to_latex]]に卒論の最終形態への変換手順が記されています．まずは，下の入門編をお読みください．

!hikiutils -iによる卒論作成システム
卒業論文は，大学で課される一般的なレポートに比べて多くの情報内容が要求される．また，研究という側面から体裁や版権など多くの出版における掟を遵守しながら，高い品質を保つ必要がある．そのため，指導教官との編集作業が重要となる．編集作業の効率を高めるためには，共同作業を促進するプラットフォームが必要である．

体裁などを考えるとLatexの使用が標準であるが，執筆段階での煩わしさを低減するため，Mark Up記法による文章作成が一般的である(「ドキュメント作成システム構築ガイド，GitHub, RedPen, Asciidoctor, CIによるモダンライティング」, 伊藤敬彦，吉村孝広，技術評論社)．西谷研ではMark Up記法の一種であるhiki記法を用いて執筆している．hiki記法からhtmlへ変換するソフトhikidocによる容易な変換が可能なため，日記web appliのhiki diaryでも利用されている．hiki記法をベースにして，wiki wiki webと同等の機能を提供するhikiシステムがgithubに公開されており，個人の手持ちのパソコンにインストールしてwikiを利用することができる．西谷研ではさらにhiki記法を拡張して，コードのカラー表示，数式のlatex記述が可能となるシステムを利用している．

本資料では，卒論の編集作業を効率化する図に示すようなシステムの使い方を紹介する．
!!!caption:卒論編集システムの概要．
{{attach_view(hikiutils_bob.002.jpeg,hikiutils_bob)}}

例えば，卒業生をyamaneとしよう．yamaneの個人のMacの自分のdirectory(hikiutils_yamane)に幾つかのファイルを作成して卒論を書いているとする．これを指導教官(bob)が編集する必要がある．この同期には，Githubにより提供される共同作業環境をつかう．これだけでは編集中の文書の体裁がわかりにくい．そこで，hikiシステムにより容易にwebブラウザ上に完成形を表示しつつ執筆することが求められる．このような操作環境を提供するのが，hikiutils -iである．
! hikiutilsのinstall
hikiuitlsをgemからinstallしておく必要がある．コマンドは以下の通り．

 gem install hikiutils
さらに
 hiki -v
で0.2.3.2以上であることを確認．

! 個別ディレクトリーの構成
図にhikiutils_bobのディレクトリー構成を示す．
!!!caption:hikiutils_bobのディレクトリー構成．
{{attach_view(hikiutils_bob.003.jpeg,hikiutils_bob)}}

コマンド
 hiki -i
によって以下のようなファイルが作成される．

<<< bash
bob% ls -lat
total 1072
-rw-r--r--   1 bob  501      99  1 20 12:44 .hikirc
drwxr-xr-x   5 bob  501     170  1 20 12:44 figs/
drwxr-xr-x  12 bob  501     408  1 20 12:34 ./
-rw-r--r--   1 bob  501       8  1 20 11:01 .gitignore
-rw-r--r--   1 bob  501    3507  1 20 11:01 Rakefile
drwxr-xr-x   2 bob  501      68  1 20 11:01 data/
-rw-r--r--   1 bob  501    2595  1 20 11:01 hiki_help.yml
drwxr-xr-x  26 bob  501     884  1 20 11:00 ../
>>>

この.hikircにデータが設定データが自動的に入る．さらにhikiutils_bob.hikiおよびhikiutils_bob.keyを作成する．これで執筆ファイルの基本構成が出来上がる．

keynoteで図を作成して，hikiutils_bob.hikiに文章を記述していく．

!一般的な執筆手順
#書類の作成
##open -a mi hikiutils_bob.hiki
#keynoteを開ける
##open hikiutils_bob.key
#keynoteのイメージをfigsに
##keynoteでイメージへ書き出し(hikiutils_bobを仮定)
##rake convert 80 hikiutils_bob
#hikiシステムとの同期
## rake sync
# hikiシステムで表示
## hiki -u hikiutils_bob

!rakeが用意しているタスク
rakeの用意しているコマンドは次のとおり．

<<< bash
rake check_previous  # check previou and current sync
rake chenv           # For hiki Errno::ENOENT, Errno::EACCES
rake convert         # convert fig size SCALE TARGET_DIR
rake force_sync      # force_sync hikis and figs to hiki directory
rake increment       # increment fig NUBERS in FILE
rake number          # numbering figs from the NUBER in FILE
rake self_copy       # self copy to hikiutils template directory
rake sync            # normal sync hikis and figs to hiki directory
rake sync0           # sync0 hikis and figs to hiki directory
>>>

!!rake sync
hikiutils_bobにある必要な書類をhikiシステムにコピーする．その際，名前の書き換えを行う．
|| hikiutils_bobでの名前 || hikiシステムでの名前
|| hikiutils_bob.hiki || hikiutils_bob
|| introduction.hiki || hikiutils_bob_introduction

figsディレクトリー内のファイルはhiki/cache/attache/hikiutils_bobにcpされる．従って，hiki文書中で参照するには，
 {{attach_view(hogehoge.png, hikiutils_bob)}}
という記述が必要となる．

!!rake convert
keynoteが吐き出したイメージを変換するためのコマンド．ImageMagickがインストールされている必要がある．ない場合は，自分でbrewからinstallするか，[[https://www.imagemagick.org/script/binary-releases.php]]からダウンロード．うまくいかない場合はdonkeyに聞いてみてください．

 rake convert 80 hikiutils_bob
によって，hikiutils_bobにkeynoteから吐いたpngファイルを80%に縮小してfigsにためる．

!!rake force_sync
hikiシステム側で直接変更を加えると，hikiutilsがsyncした時と差ができる．これを検知して，ユーザに注意を喚起する仕組みがある（rake check_previous)．これはsyncした時に自動的に呼び出される．違いの出たfilesを修正した後に強制的に同期をとるためのコマンドとして，force_syncが用意されている．

!!rake chenv
hikiシステム上でerrorが出た場合に試してほしい．errorの状況は個人の設定によってちがうため，対処法の実装は網羅されていない．うまくいかない場合は西谷にIssuesとして投げるように．

!!rake increment
keynoteでページを追加するとhikiでの参照(attach_view)にずれが生じる．いまのところこれを解消する方法はなく手で修正を加える必要がある．ずれが単純な場合には，
<<< bash
cp hikiutils_bob.hiki tmp.hiki
rake increment 2 tmp.hiki > tmp2.hiki
>>>
としてattach_viewのページ番号を単純に増加させることができる．

!!rake number
前節同じくfigs内の通し番号が変わった時にattach_viewの通し番号を調整するコマンド．
<<< bash
rake number 3 hikiutils_bob.hiki > tmp.hiki
cp tmp.hiki hikiutils_bob.hiki
>>>
とすると
<<<
8c8
< {{attach_view(hikiutils_bob.002.jpeg,hikiutils_bob)}}
---
> {{attach_view(hikiutils_bob.003.jpeg,hikiutils_bob)}}
21c21
< {{attach_view(hikiutils_bob.003.jpeg,hikiutils_bob)}}
---
> {{attach_view(hikiutils_bob.004.jpeg,hikiutils_bob)}}
>>>
などと番号を3から順に振り替えてくれる．

!githubによる同期
# git initが済んでいると仮定
# upstream, originの確認
## bob% git remote -v
# git push作業
## git add -A
## git commit -m 'first commit'
## git push origin master
# githubでbobへpull requestをかける
# 編集後
# git pull作業
## git pull upstream origin
これがうまくいかん時は聞いてください．

!hiki_helpで表示されるヘルプ内容
hiki_help -i -fにより，使い方のメモが表示される．

!!hikiで卒論を書くときの初期化と掟
*開発メモ:figs,dataも作成
*目的：西谷が後で迷わないように決まったファイル構造を堅持すべし
*文書：hikiで書く.のちには，latexに変換するプログラムを提供します
*図表：すべての図表をkeynoteにまとめる，タイトルを分かりやすく書く
*データ：dataディレクトリにまとめる．ファイル名をkeynoteの対応する図表中に記す
*hiki --initializeで初期ファイル(Rakefile, ./.hikirc, hiki_help.yml)がcopyされる
*hiki_help.ymlを適宜~/.my_helpにcopyしてhiki_helpとして利用，(my_help参照)
*Errno::EACCESやpermission errorがでたときはrake chenvを試してみる（報告して）
*rake syncによってhikiディレクトリーと同期が取られる
*hiki -u TARGETによってブラウザー表示される
*テキストの拡張子は'.hiki'
*hikiでのurlはテキスト前とディレクトリーから自動生成される
*例えば，hiki2latex_saki/introduciton.hikiとするとhiki2latex_saki_introducitonと変換される

!!図表：すべての図表をkeynoteにまとめる，タイトルを分かりやすく書く
*keynoteに書いたスライドはイメージに書き出して，rake convert 80 TARGET_DIRでfigsに変換
*rake syncでfigsにあるfilesはhiki/target_dirにcpされる

 convert #{source} -resize 20% #{target}によって，target=figs/TAERGET.pngに20%に縮小して保存される

*convert -density 300 view.svg view.pngで300dpiで変換
*attach_anchorでは
'{{attach_anchor(test.png, hiki2latex_saki)}}'
と，directory指定しなければならない.
*keynoteであとで図を挿入して番号が変わった時の原稿の一括変換
*rake increment 2 boundary_bob.hiki boundary_bob > tmp.hiki
*rake convert 60 boundary_bob
*rake sync
*hiki -u boundary_bob_tmp
